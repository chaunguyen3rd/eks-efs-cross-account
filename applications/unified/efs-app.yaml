---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: efs-sc
provisioner: efs.csi.aws.com
mountOptions:
  - tls
  - iam
parameters:
  provisioningMode: efs-ap
  fileSystemId: "${EFS_ID}"
  directoryPerms: "0755"
  gidRangeStart: "1000"
  gidRangeEnd: "2000"
  basePath: "/shared"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: efs-pv
spec:
  capacity:
    storage: 10Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  csi:
    driver: efs.csi.aws.com
    volumeHandle: "${EFS_ID}"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: efs-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 10Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: efs-app
  namespace: default
  labels:
    app: efs-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: efs-app
  template:
    metadata:
      labels:
        app: efs-app
    spec:
      containers:
        - name: efs-app
          image: alpine:latest
          command: ["/bin/sh"]
          args:
            - -c
            - |
              echo "EFS Application Started"
              echo "Cluster Type: $CLUSTER_TYPE"
              echo "App Name: $APP_NAME"
              echo "EFS ID: $EFS_ID"

              # Create necessary directories
              mkdir -p /mnt/efs/logs
              mkdir -p /mnt/efs/data

              while true; do
                timestamp=$(date '+%Y-%m-%d %H:%M:%S')
                hostname=$(hostname)
                
                echo "[$timestamp] ========================================="
                echo "[$timestamp] $APP_NAME on $CLUSTER_TYPE cluster - $hostname"
                
                # Write data to EFS
                echo "[$timestamp] Writing data from $CLUSTER_TYPE ($APP_NAME) - $hostname" >> /mnt/efs/logs/activity.log
                echo "Data from $CLUSTER_TYPE cluster at $timestamp" > "/mnt/efs/data/${APP_NAME}-$(date +%s).txt"
                
                # Read and display current state
                echo "[$timestamp] Current files in EFS:"
                ls -la /mnt/efs/ 2>/dev/null || echo "Cannot list root directory"
                
                if [ -d "/mnt/efs/logs" ]; then
                  echo "[$timestamp] Recent activity (last 10 lines):"
                  tail -10 /mnt/efs/logs/activity.log 2>/dev/null || echo "No activity log yet"
                else
                  echo "[$timestamp] Logs directory not accessible"
                fi
                
                if [ -d "/mnt/efs/data" ]; then
                  echo "[$timestamp] Data files count:"
                  ls -1 /mnt/efs/data/*.txt 2>/dev/null | wc -l || echo "0"
                  echo "[$timestamp] Latest data files:"
                  ls -lt /mnt/efs/data/*.txt 2>/dev/null | head -5 || echo "No data files yet"
                else
                  echo "[$timestamp] Data directory not accessible"
                fi
                
                echo "[$timestamp] Sleeping for 30 seconds..."
                sleep 30
              done
          env:
            - name: CLUSTER_TYPE
              valueFrom:
                configMapKeyRef:
                  name: efs-app-config
                  key: CLUSTER_TYPE
            - name: EFS_ID
              valueFrom:
                configMapKeyRef:
                  name: efs-app-config
                  key: EFS_ID
            - name: APP_NAME
              valueFrom:
                configMapKeyRef:
                  name: efs-app-config
                  key: APP_NAME
          volumeMounts:
            - name: efs-storage
              mountPath: /mnt/efs
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      volumes:
        - name: efs-storage
          persistentVolumeClaim:
            claimName: efs-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: efs-app-service
  namespace: default
spec:
  selector:
    app: efs-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP
